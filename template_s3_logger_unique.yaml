AWSTemplateFormatVersion: '2010-09-09'
Description: 'Projeto simples - Lambda que registra uploads do S3 no CloudWatch (corrigido para nomes Ãºnicos)'

Resources:
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 's3-logger-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'
  
  LogUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 's3-upload-logger-${AWS::StackName}'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              print("Evento recebido:", json.dumps(event))
              for record in event.get("Records", []):
                  bucket = record["s3"]["bucket"]["name"]
                  key = record["s3"]["object"]["key"]
                  print(f"ðŸ“„ Novo arquivo recebido: {key} no bucket {bucket}")
              return {"statusCode": 200, "body": "OK"}

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LogUploadFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:${AWS::Partition}:s3:::s3-logger-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}'

Outputs:
  BucketName:
    Description: 'Bucket criado automaticamente (nome Ãºnico)'
    Value: !Sub 's3-logger-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}'
  LambdaName:
    Description: 'FunÃ§Ã£o Lambda que registra uploads'
    Value: !Ref LogUploadFunction
